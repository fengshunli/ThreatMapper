/* eslint-disable react/destructuring-assignment */
import React from 'react';
import moment from 'moment';
import { DfTableV2 } from '../../common/df-table-v2';
import { DfDropDownMenu } from '../../common/df-dropdown/index';
import { dateTimeFormat } from '../../../utils/time-utils';


const ImageTagsTable = (props) => {

  const { imageTags, nodeActionOptions } = props;
  return (
    <div>
       <DfTableV2
       data={imageTags}
       columns={[
        {
            Header: 'Image Tag',
            accessor: 'image_tag',
            maxWidth: 150,
          },
            {
            Header: 'Pushed at',
            accessor: row => {
              if (row.pushed_at) {
                return dateTimeFormat(row.pushed_at);
              }
              return '';
            },
            id: 'pushed_at',
            maxWidth: 200,
          },
          {
            Header: 'Size',
            accessor: 'docker_image_size',
            maxWidth: 150,
          },
          {
            Header: 'Status',
            id: 'vulnerability_scan_status',
            accessor: row => {
              let cveStatus = row.vulnerability_scan_status;
              const latestScanTimeStr = row.vulnerability_scan_status_time;
              switch (cveStatus) {
                case 'queued': {
                  cveStatus = 'Queued';
                  break;
                }
                case 'in_progress': {
                  cveStatus = 'In Progress';
                  break;
                }
                case 'error': {
                  cveStatus = 'Error';
                  break;
                }
                case 'complete': {
                  cveStatus = 'Completed';
                  break;
                }
                default:
                  cveStatus = 'Never Scanned';
              }

              let summary = cveStatus;
              if (cveStatus === 'Completed' && latestScanTimeStr) {
                summary = `Completed ${moment(
                  latestScanTimeStr.replace(/"/g, '')
                ).fromNow()}`;
              }
              return summary;
            },
            Cell: cell => {
              const {
                original: { vulnerability_scan_status_msg: reason = '' } = {},
              } = cell;
              return (
                <div>
                  <span> {cell.value} </span>
                  {reason && (
                    <span title={reason} className="fa fa-info-circle" />
                  )}
                </div>
              );
            },
          },
       ]}
       multiSelectOptions={{
        actions: [
          {
            name: 'Scan',
            IconComponent: DfDropDownMenu,
            componentParams: {
              alignment: 'right',
              label: 'Actions',
              options: nodeActionOptions,
            },
            onClick: () => ({}),
          },
        ],
        columnConfig: {
          accessor: 'image_name_with_tag',
        }
      }} />
    </div>
  )
}

export default ImageTagsTable;