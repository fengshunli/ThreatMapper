/* eslint-disable react/no-access-state-in-setstate */
/* eslint-disable react/destructuring-assignment */
import React from 'react';
import { Map } from 'immutable';
import OutsideClickHandler from 'react-outside-click-handler';
import { connect } from 'react-redux';
import DFTable from '../../common/df-table/index';
// import AppLoader from '../../common/app-loader/horizontal-dots-loader';
import AppLoader from '../../loader';
import { dateTimeFormat } from '../../../utils/time-utils';
import RegistryImageList from './image-list';
import {
  listRegistryCredentialsAction,
  deleteRegistryCredentialsAction,
  showModal,
  toaster,
} from '../../../actions/app-actions';
import NotificationToaster from '../../common/notification-toaster/notification-toaster';
import { getUserRole } from '../../../helpers/auth-helper';
import MORE_IMAGE from '../../../../images/more.svg';

const loaderStyle = {
  top: '6.8%',
  left: '50%',
};

class RegistryCredentialsList extends React.PureComponent {
  constructor(props) {
    super(props);
    this.handleDeleteDialog = this.handleDeleteDialog.bind(this);
    this.deleteRegistry = this.deleteRegistry.bind(this);
    this.getRegistry = this.getRegistry.bind(this);
    this.onExpandedChange = this.onExpandedChange.bind(this);
    this.handleActionEditDelete = this.handleActionEditDelete.bind(this);
    this.state = {
      tableAction: false,
      cellValue: 0,
      expandedRowIndex: {
        0: {},
      },
    };
  }

  componentDidMount() {
    this.getRegistry();
  }

  handleActionEditDelete(cellID) {
    this.setState({
      tableAction: !this.state.tableAction,
      cellValue: cellID
    });
  }

  handleResetEditDeleteActionState() {
    this.setState({
      tableAction: false,
      cellValue: 0
    });
  }

  onExpandedChange(rowInfo) {
    let expandedRowIndex = {
      ...this.state.expandedRowIndex,
    };
    const pageIndex = rowInfo.index;
    if (expandedRowIndex[pageIndex]) {
      expandedRowIndex[pageIndex] = !expandedRowIndex[pageIndex];
    } else {
      expandedRowIndex = {
        [pageIndex]: {},
      };
    }
    this.setState({
      expandedRowIndex,
    });
  }

  getRegistry() {
    const {
      listRegistryCredentialsAction: action,
      registryType,
    } = this.props;
    action({
      registryType,
    });
  }

  deleteRegistry(registryId) {
    const {
      deleteRegistryCredentialsAction: action,
      toaster: toasterAction,
    } = this.props;
    const params = {
      registryId,
    };
    const promise = action(params);
    promise.then((response) => {
      if (response instanceof Error) {
        toasterAction('Registry deletion failed due to an unknown error');
      }
      this.getRegistry();
    });

    return promise;
  }

  handleDeleteDialog(registryId) {
    const params = {
      dialogTitle: 'Delete Registry Credentials?',
      dialogBody: 'Are you sure you want to delete?',
      confirmButtonText: 'Yes, Delete Credentials',
      cancelButtonText: 'No, Keep Credentials',
      onConfirmButtonClick: () => this.deleteRegistry(registryId),
      contentStyles: {
        width: '375px',
      },
    };
    this.props.showModal('DIALOG_MODAL', params);
  }

  render() {
    const userRole = getUserRole();
    const {
      dataIm = Map(),
      loadingIm = Map(),
      registryType,
      isToasterVisible,
      triggerEdit,
      ImageIndexIm = Map(),
      totalIndexIm = Map(),
      uniqueImageCountIndexIm = Map(),
    } = this.props;

    const data = dataIm.get(registryType, []);
    const loading = loadingIm.get(registryType);
    const { expandedRowIndex } = this.state;

    const registryImageIndex = ImageIndexIm.get(registryType, Map());
    const dataWithStats = data.map((credential) => {
      const credentialId = credential.id;
      const imageList = registryImageIndex.get(credentialId, []);
      const totalImages = totalIndexIm.getIn([registryType, credentialId], 99);
      const uniqueImageCount = uniqueImageCountIndexIm.getIn([registryType, credentialId], 99);
      const totalScanned = imageList.reduce((acc, image) => {
        const {
          vulnerability_scan_status: cveStatus,
        } = image;
        if (cveStatus !== 'never_scanned') {
          if (cveStatus === 'complete') {
            acc.totalScanned += 1;
          } else {
            acc.totalProgress += 1;
          }
          return acc;
        }
        return acc;
      }, {
        totalProgress: 0,
        totalScanned: 0,
      });
      return {
        ...credential,
        totalImages,
        uniqueImageCount,
        ...totalScanned
      };
    });

    console.log('CREDLIST DATA', dataWithStats);

    return (
      <div>
        <DFTable
          data={dataWithStats}
          minRows={0}
          expanded={expandedRowIndex}
          onPageChange={() => this.setState({ expandedRowIndex: {} })}
          getTdProps={(state, rowInfo) => ({
            onClick: () => this.onExpandedChange(rowInfo),
            style: {
              cursor: 'pointer',
            },
          })}
          LoadingComponent={loading ? () => (<AppLoader small style={loaderStyle} />) : undefined}
          columns={[
            {
              Header: 'Created',
              id: 'created_at',
              accessor: (row) => {
                if (row.created_at) {
                  return dateTimeFormat(row.created_at);
                }
                return '';
              },
              maxWidth: 200,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'Name',
              accessor: 'name',
              sortable: false, // Disabling sort because it messes up with expanded row index
              Cell: row => (
                <span title={row.value}>
                  {row.value}
                </span>
              ),
            },
            {
              Header: 'Total Images',
              accessor: 'uniqueImageCount',
              maxWidth: 150,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'Total Tags',
              accessor: 'totalImages',
              maxWidth: 150,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'Total Scanned',
              accessor: 'totalScanned',
              maxWidth: 150,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'In Progress',
              accessor: 'totalProgress',
              maxWidth: 150,
              sortable: false, // Disabling sort because it messes up with expanded row index
            },
            {
              Header: 'Credentials',
              accessor: (row) => {
                const { credentials } = row;
                const forDisplay = Object.keys(credentials).reduce((acc, key) => {
                  const userFriendlyKey = key.replace(/_/g, ' ');
                  acc[userFriendlyKey] = credentials[key];
                  return acc;
                }, {});
                return JSON.stringify(forDisplay);
              },
              id: 'credentials',
              sortable: false,
              Cell: row => (
                <span title={row.value}>
                  {row.value}
                </span>
              ),
              minWidth: 350,
            },
            {
              /* eslint-disable */
              Header: 'Action',
              accessor: 'id',
              Cell: row => (
                <OutsideClickHandler
                  onOutsideClick={() => {
                    this.handleResetEditDeleteActionState();
                  }}
                  disabled={(this.state.cellValue !== row.value) || !this.state.tableAction}
                >
                  <img
                    src={MORE_IMAGE}
                    alt="more"
                    className="action-table-target"
                    onClick={(e) => {
                      e.stopPropagation();
                      this.handleActionEditDelete(row.value);
                    }} />
                  {((this.state.cellValue === row.value) && this.state.tableAction)
                    && (
                      <div className="action-table-registry" style={{ zIndex: '1' }}>
                        <i
                          className="fa fa-lg fa-trash-o"
                          style={{ color: 'red', marginRight: '10px' }}
                          onClick={() => this.handleDeleteDialog(row.value)}
                          aria-hidden="true"
                        />
                        <i
                          className="fa fa-lg fa-pencil"
                          onClick={(ev) => {
                            ev.stopPropagation();
                            const { original } = row;
                            const initialValues = {
                              name: original.name,
                              non_secret: original.credentials,
                              id: original.id,
                            };
                            triggerEdit({ initialValues, });
                          }}
                          aria-hidden="true"
                        />
                      </div>
                    )
                  }
                </OutsideClickHandler>
              ),
              style: { textAlign: 'left' },
              sortable: false,
              show: userRole === 'admin',
              maxWidth: 60,
            },
          ]}
          SubComponent={component => (
            <div className="sub-row">
              <RegistryImageList
                registryId={component.row.id}
                registryType={registryType}
              />
            </div>
          )}
        />
        {isToasterVisible && <NotificationToaster />}
      </div>
    );
  }
}

const mapStateToProps = state => ({
  dataIm: state.getIn(['cve', 'container_image_registry', 'list_credentials', 'data']),
  loadingIm: state.getIn(['cve', 'container_image_registry', 'list_credentials', 'loading']),
  errorMessageIm: state.getIn(['cve', 'container_image_registry', 'list_credentials', 'error', 'message']),
  isToasterVisible: state.get('isToasterVisible'),
  ImageIndexIm: state.getIn(['cve', 'container_image_registry', 'images']),
  totalIndexIm: state.getIn(['cve', 'container_image_registry', 'total']),
  uniqueImageCountIndexIm: state.getIn(['cve', 'container_image_registry', 'uniqueImageCount']),
});

export default connect(mapStateToProps, {
  listRegistryCredentialsAction,
  deleteRegistryCredentialsAction,
  showModal,
  toaster,
})(RegistryCredentialsList);
