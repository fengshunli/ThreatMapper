/* eslint-disable react/destructuring-assignment */
/*eslint-disable*/
import React from 'react';
import { connect } from 'react-redux';
import {
  getTopVulnerableActiveContainersAction,
  updateTableJSONModalView,
  toaster
} from '../../actions/app-actions';
import pollable from '../common/header-view/pollable';
import { DfTableV2 } from '../common/df-table-v2';
import { fetchAlertsData} from '../../utils/web-api-utils';
import TopExploitableSeverityReport from './top-exploitable-severity-report';

class TopExploitableVulnerabilities extends React.Component {
  constructor(props) {
    super(props);
    this.handleCVEIdClick = this.handleCVEIdClick.bind(this);
    this.getTopStats = this.getTopStats.bind(this);
  }

  componentDidMount() {
    // pollable: register the function which needs to be polled
    const {
      registerPolling,
      startPolling,
    } = this.props;
    registerPolling(this.getTopStats);
    startPolling();
  }

  UNSAFE_componentWillReceiveProps(newProps) {
    const {
      alertPanelHistoryBound: newBounds,
      globalSearchQuery: newQuery,
    } = newProps;
    const {
      alertPanelHistoryBound: currentBounds,
      globalSearchQuery: currentQuery,
    } = this.props;

    if (currentBounds !== newBounds || currentQuery !== newQuery) {
      this.getTopStats({
        alertPanelHistoryBound: newBounds,
        globalSearchQuery: newQuery,
      });
    }
  }

  getTopStats(params = {}) {
    const {
      alertPanelHistoryBound = this.props.alertPanelHistoryBound || [],
      globalSearchQuery = this.props.globalSearchQuery || [],
    } = params;

    const {
      getTopVulnerableActiveContainersAction: action,
    } = this.props;

    const apiParams = {
      luceneQuery: globalSearchQuery,
      ...(alertPanelHistoryBound.value
        ? {number: alertPanelHistoryBound.value.number} : {}),
      ...(alertPanelHistoryBound.value
        ? {timeUnit: alertPanelHistoryBound.value.time_unit} : {}),
    };

    return action(apiParams);
  }


  handleCVEIdClick(alertDocId) {
    const {alertIndex = {}, dispatch} = this.props;

    if (!alertIndex[alertDocId]) {
      const params = {
        activeIndex: 0,
        recordsPerPage: 1,
        sortOrder: 'desc',
        activeFilter: {
          doc_id: alertDocId,
        },
        lucene_query: [],
        type: 'cve',
      };
      fetchAlertsData(dispatch, params).then((response) => {
        const alertList = response.data.hits;
        if (alertList.length === 1) {
          dispatch(updateTableJSONModalView(alertList[0]));
        } else {
          dispatch(toaster('The requested alert either masked or not found'));
        }
      });
    } else {
      dispatch(updateTableJSONModalView(alertIndex[alertDocId]));
    }
  }

  render() {
    const {
      topStats = [],
      groupedTopExploits = [],
      globalSearchQuery,
      dispatch,
    } = this.props;
    let allEmpty = false;
    if (groupedTopExploits && groupedTopExploits.children) {
      if (
        groupedTopExploits.children[0].children.length === 0
        && groupedTopExploits.children[1].children.length === 0
        && groupedTopExploits.children[2].children.length === 0
        && groupedTopExploits.children[3].children.length === 0
      ) {
        allEmpty = true;
      }
    }
    const emptyData = allEmpty;

    return (
      <div className="runtime-vulnerabilities">
        <div className="runtime-vulnerabilities-chart">
          <div className="meta-description small" style={{paddingTop: '10px'}}> Snapshot of severe vulnerabilities in running hosts and containers which are exploitable remotely. </div>
          {emptyData
          && (
          <div className="absolute-center" style={{top: '600px'}}>
            No Data Available
          </div>
          )}
          <TopExploitableSeverityReport
            data={groupedTopExploits}
            globalSearchQuery={globalSearchQuery}
            dispatch={dispatch}
          />
        </div>
        <div className="runtime-vulnerabilities-chart">
          <DfTableV2 
          onRowClick={ (row) => this.handleCVEIdClick(row.docId)}
          enableSorting
          data={topStats}
          showPagination
            columns={[
              {
                Header: 'Rank',
                accessor: 'rank',
                maxWidth: 100,
              },
              {
                Header: 'CVE ID',
                accessor: 'cveId',
                maxWidth: 200,
                Cell: row => (
                  <div
                    className="truncate"
                    title={row.value}>
                    {row.value}
                  </div>
                ),
              },
              {
                Header: 'Severity',
                accessor: 'cveSeverity',
                maxWidth: 150,
                Cell: row => (
                  <div
                    className={`${row.value}-severity`}
                  >
                    {row.value}
                  </div>
                ),
              },
              {
                Header: 'Score',
                accessor: 'score',
                maxWidth: 150,
                Cell: row => (
                  <div>
                    {row.value.toFixed(2)}
                  </div>
                ),
              },
              {
                Header: 'Image',
                id: 'image',
                accessor: (row) => {
                  const {
                    vulnerableImages = [],
                    image,
                  } = row;
                  const otherImages = vulnerableImages.length - 1;
                  return `${image} ${otherImages ? ` + ${otherImages} image(s)` : ''}`;
                },
                Cell: (row) => {
                  const {
                    original: {
                      vulnerableImages = [],
                    } = {},
                  } = row;
                  const otherImages = vulnerableImages.join(', ');
                  return (
                    <div
                      className="truncate"
                      title={otherImages}>
                      {row.value}
                    </div>
                  );
                },
              },
              {
                Header: 'Description',
                accessor: 'description',
                Cell: row => (
                  <div
                    className="truncate"
                    title={row.value}>
                    {row.value}
                  </div>
                ),
              },
            ]} /> 
        </div>
      </div>
    );
  }
}
function mapStateToProps(state) {
  return {
    alertPanelHistoryBound: state.get('alertPanelHistoryBound') || [],
    globalSearchQuery: state.get('globalSearchQuery') || [],
    topStats: state.getIn(['cve', 'top_exploits']) || [],
    groupedTopExploits: state.getIn(['cve', 'top_exploits_grouped']),
  };
}

export default connect(
  mapStateToProps, {
    getTopVulnerableActiveContainersAction,
  }
)(pollable()(TopExploitableVulnerabilities));
