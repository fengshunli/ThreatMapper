/* eslint-disable react/no-access-state-in-setstate */
/* eslint-disable react/destructuring-assignment */
import React from 'react';
import OutsideClickHandler from 'react-outside-click-handler';
import { dateTimeFormat } from '../../utils/time-utils';
import { DfTableV2 } from '../common/df-table-v2'
import {
  showModal,
  deleteScanActions,
  toaster,
} from '../../actions/app-actions';
import NotificationToaster from '../common/notification-toaster/notification-toaster';
import MORE_IMAGE from '../../../images/more.svg';

class CVEImageReportRowDetail extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      tableAction: false,
      cellValue: 0,
    };
    this.handleDeleteDialogScans = this.handleDeleteDialogScans.bind(this);
    this.deleteScanActions = this.deleteScanActions.bind(this);
    this.handleActionEditDelete = this.handleActionEditDelete.bind(this);
  }

  handleDeleteDialogScans(scanId) {
    const params = {
      dialogTitle: 'Delete Results ?',
      dialogBody: 'Are you sure you want to delete?',
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      onConfirmButtonClick: () => this.deleteScanActions(scanId),
      contentStyles: {
        width: '375px',
      },
    };
    this.props.dispatch(showModal('DIALOG_MODAL', params));
  }

  handleActionEditDelete(cellID) {
    this.setState({
      tableAction: !this.state.tableAction,
      cellValue: cellID
    });
  }

  handleResetEditDeleteActionState() {
    this.setState({
      tableAction: false,
      cellValue: 0
    });
  }

  deleteScanActions(scanId) {
    const params = {
      scan_id: scanId,
      doc_type: 'cve',
      time_unit: 'all',
      number: '0',
    };
    const successHandler = (response) => {
      const {
        success,
        error: apiError,
      } = response;
      if (success) {
        this.props.dispatch(toaster('Successfully deleted'));
        setTimeout(this.props.onDelete, 2000);
      } else {
        this.props.dispatch(toaster(`ERROR: ${apiError.message}`));
      }
    };
    const apiErrorHandler = () => {
      this.props.dispatch(toaster('Something went wrong'));
    };
    return this.props.dispatch(deleteScanActions(params)).then(successHandler, apiErrorHandler);
  }

  render() {
    const {
      data,
      rowClickHandler,
      handleDownload,
      isToasterVisible,
    } = this.props;

    return (
      <div>
        <DfTableV2
        data={data}
        onRowClick = {(row) => rowClickHandler(row.original.scan_id)}
        columns={[
          {
            Header: '',
            accessor: 'cve_scan_message',
            minWidth: 178,
            Cell: row => (
              <div
                className="truncate"
                title={row.value}>
                {row.value}
              </div>
            ),
          },
          {
            Header: 'Timestamp',
            accessor: row => (
              dateTimeFormat(row.time_stamp)
            ),
            id: 'timestamp',
          },
          {
            Header: 'Status',
            accessor: 'action',
            minWidth: 120,
            Cell: cell => (
              <div className={cell.value === 'COMPLETED' ? 'status-success' : 'status-failed'}>
                {cell.value}
              </div>
            ),
          },
          {
            Header: 'Active Containers',
            accessor: 'active_containers',
            maxWidth: 120,
          },
          {
            Header: 'Total',
            accessor: 'total',
            maxWidth: 80,
          },
          {
            Header: 'Score',
            accessor: row => (
              row.cve_score ? row.cve_score.toFixed(2) : 0
            ),
            id: 'cveScore',
            maxWidth: 80,
          },
          {
            Header: 'Critical',
            accessor: 'severity.critical',
            Cell: row => (
              <div>
                <div className="cve-severity-box-wrap-critical value">
                  {row.value || 0}
                </div>
              </div>
            ),
            maxWidth: 80,
          },
          {
            Header: 'High',
            accessor: 'severity.high',
            Cell: row => (
              <div>
                <div className="cve-severity-box-wrap-high value">
                  {row.value || 0}
                </div>
              </div>
            ),
            maxWidth: 80,
          },
          {
            Header: 'Medium',
            accessor: 'severity.medium',
            Cell: row => (
              <div>
                <div className="cve-severity-box-wrap-medium value">
                  {row.value || 0}
                </div>
              </div>
            ),
            maxWidth: 80,
          },
          {
            Header: 'Low',
            accessor: 'severity.low',
            Cell: row => (
              <div>
                <div className="cve-severity-box-wrap-low value">
                  {row.value || 0}
                </div>
              </div>
            ),
            maxWidth: 80,
          },
          {
            Header: '',
            width: 60,
            accessor: 'scan_id',
            Cell: cell => (
              <OutsideClickHandler
                onOutsideClick={() => {
                  this.handleResetEditDeleteActionState();
                }}
                disabled={(this.state.cellValue !== cell.value) || !this.state.tableAction}
              >
                <img
                  src={MORE_IMAGE}
                  alt="more"
                  className="action-table-target"
                  onClick={(e) => {
                    e.stopPropagation();
                    this.handleActionEditDelete(cell.value);
                  }}
                  aria-hidden="true"
                />
                {((this.state.cellValue === cell.value) && this.state.tableAction) && (
                  <div className="action-table" style={{ zIndex: '1' }}>
                    <div
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDownload(cell.value, cell.original.node_type);
                      }}
                      aria-hidden="true"
                    >
                      <i className="fa fa-download" />
                    </div>
                    <div
                      onClick={(e) => {
                        e.stopPropagation();
                        this.handleDeleteDialogScans(cell.value);
                      }}
                      aria-hidden="true"
                    >
                      <i className="fa fa-trash-o red cursor" />
                    </div>
                  </div>
                )
                }
              </OutsideClickHandler>
            ),
          },
        ]}
        />
        {isToasterVisible && <NotificationToaster />}
      </div>

    );
  }
}

export default CVEImageReportRowDetail;
